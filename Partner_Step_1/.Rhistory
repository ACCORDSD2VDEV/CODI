# Names of database tables
assign("demographics", value = "demographics", envir = .GlobalEnv)
assign("encounters", value = "encounters", envir = .GlobalEnv)
assign("census_location", value = "census_location", envir = .GlobalEnv)
assign("diagnoses", value = "diagnoses", envir = .GlobalEnv)
assign("vital_signs", value = "vital_signs", envir = .GlobalEnv)
assign("lab_results", value = "lab_results", envir = .GlobalEnv)
assign("procedures", value = "procedures", envir = .GlobalEnv)
assign("benefit", value = "benefit", envir = .GlobalEnv)
assign("linkage", value = "linkage", envir = .GlobalEnv)
assign("social_history", value = "social_history", envir = .GlobalEnv)
assign("provider_specialty", value = "provider_specialty", envir = .GlobalEnv)
assign("pro_surveys", value = "pro_surveys", envir = .GlobalEnv)
assign("pro_questions", value = "pro_questions", envir = .GlobalEnv)
assign("pro_responses", value = "pro_responses", envir = .GlobalEnv)
assign("death", value = "death", envir = .GlobalEnv)
assign("pharmacy", value = "pharmacy", envir = .GlobalEnv)
assign("prescribing", value = "prescribing", envir = .GlobalEnv)
assign("link", value = "link", envir = .GlobalEnv)
assign("session", value = "session", envir = .GlobalEnv)
assign("demographic", value = "demographic", envir = .GlobalEnv)
}
}
renderSqlText <- function(query_text){
query_text <- paste("SET NOCOUNT ON;", query_text, sep="\r\n")
SqlRender::render(sql = query_text,
warnOnMissingParameters = FALSE,
demographics = demographics,
encounters = encounters,
census_location = census_location,
diagnoses = diagnoses,
vital_signs = vital_signs,
lab_results = lab_results,
linkage = linkage,
social_history = social_history,
provider_specialty = provider_specialty,
pro_surveys = pro_surveys,
pro_questions = pro_questions,
pro_responses = pro_responses,
death = death,
pharmacy = pharmacy,
prescribing = prescribing,
link = link,
session = session)
}
conn <- getNewDBConnection()
run_db_query(conn, readSql(here("sql", "enc_counts.sql")))
run_db_query(conn, readSql(here("sql", "cohort_demographic.sql")))
run_db_query(conn, readSql(here("sql", "cohort_demographic_age.sql")))
run_db_query(conn, readSql(here("sql", "cohort_demographic_age_filter.sql")))
run_db_query(conn, readSql(here("sql", "study_programs.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort.sql")))
run_db_query(conn, readSql(here("sql", "study_sample.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_inclusion.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_exclusion.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort.sql")))
run_db_query(conn, readSql(here("sql", "encounter_count.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_export.sql")))
run_db_query(conn, readSql(here("sql", "cohort.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_demographic.sql")))
sqlResult <- sqlQuery(conn, "SELECT * FROM #study_cohort_demographic")
dbDisconnect(conn)
write.csv(x = sqlResult,
file = paste(study_cohort_demographic_, PartnerID ,sep=''),
row.names = F,
quote = T,
sep = ",")
source('~/CODI/Step_1/Partner_Step_1/CodeToRun.r')
source('~/CODI/Step_1/Partner_Step_1/CodeToRun.r')
source('~/CODI/Step_1/Partner_Step_1/CodeToRun.r')
renv::restore()
library("RODBC")
library("here")
library("SqlRender")
source(here("Setup.r"))
getConnectionString <- function(){
connectionString <- "Driver={Sql Server};"
if(nchar(PortNumber) > 0) {
connectionString <- paste(connectionString, "Server=", ServerName, ",", PortNumber, ";Database=", DatabaseName, ";", sep='')
}
else{
connectionString <- paste(connectionString, "Server=", ServerName, ";Database=", DatabaseName, ";", sep='')
}
if(nchar(SQLServerUserName) > 0){
connectionString <- paste(connectionString, "UID=", SQLServerUserName,";PWD=", SQLServerPassword, ";", sep='' )
}
if(nchar(extraSettings) > 0) {
connectionString <- paste(connectionString, ";", extraSettings, ";", sep='' )
}
return(connectionString)
}
getNewDBConnection <- function(){
connection_string <- getConnectionString()
db_conn <- RODBC::odbcDriverConnect(connection = connection_string, believeNRows = FALSE, rows_at_time = 1)
return(db_conn)
}
run_db_query <- function(db_conn = NULL, query_text = NULL, ...) {
if (is.null(db_conn)){
db_conn <- getNewDBConnection()
disconnect <- T
}
else{
disconnect <- F
}
if (is.null(query_text)) {
stop("No query argument was passed to function")
}
rendered_sql_query <- renderSqlText(query_text)
tryCatch(
{
result <- R.utils::withTimeout(sqlQuery(channel = db_conn, query = rendered_sql_query, ...), timeout = 4000)
return(result)
},
error = function(cond){
queryError <- cond
stop(cond)
}, finally = {
if (disconnect){
close_conection(db_conn)
}
}
)
}
runTableReplacements <- function(ConnectionString) {
dfChordsTbls <- run_db_query( query_text = "
IF EXISTS
(
SELECT
*
FROM  SYSOBJECTS
WHERE XTYPE = 'U' AND
NAME = 'CHORDS_TableNames'
)
BEGIN
SELECT
[ORG_NAME],
[NEW_NAME]
FROM[CHORDS_TABLENAMES];
END; ")
if (!is.null(dfChordsTbls) & !(length(dfChordsTbls)==0)) {
assign("demographics", value = ifelse("demographics" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("demographics"), tolower(dfChordsTbls$ORG_NAME))], "demographics"), envir = .GlobalEnv)
assign("encounters", value = ifelse("encounters" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("encounters"), tolower(dfChordsTbls$ORG_NAME))], "encounters"), envir = .GlobalEnv)
assign("census_location", value = ifelse("census_location" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("census_location"), tolower(dfChordsTbls$ORG_NAME))], "census_location"), envir = .GlobalEnv)
assign("diagnoses", value = ifelse("diagnoses" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("diagnoses"), tolower(dfChordsTbls$ORG_NAME))], "diagnoses"), envir = .GlobalEnv)
assign("vital_signs", value = ifelse("vital_signs" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("vital_signs"), tolower(dfChordsTbls$ORG_NAME))], "vital_signs"), envir = .GlobalEnv)
assign("lab_results", value = ifelse("lab_results" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("lab_results"), tolower(dfChordsTbls$ORG_NAME))], "lab_results"), envir = .GlobalEnv)
assign("procedures", value = ifelse("procedures" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("procedures"), tolower(dfChordsTbls$ORG_NAME))], "procedures"), envir = .GlobalEnv)
assign("benefit", value = ifelse("benefit" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("benefit"), tolower(dfChordsTbls$ORG_NAME))], "benefit"), envir = .GlobalEnv)
assign("linkage", value = ifelse("linkage" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("linkage"), tolower(dfChordsTbls$ORG_NAME))], "linkage"), envir = .GlobalEnv)
assign("social_history", value = ifelse("social_history" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("social_history"), tolower(dfChordsTbls$ORG_NAME))], "social_history"), envir = .GlobalEnv)
assign("provider_specialty", value = ifelse("provider_specialty" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("provider_specialty"), tolower(dfChordsTbls$ORG_NAME))], "provider_specialty"), envir = .GlobalEnv)
assign("pro_surveys", value = ifelse("pro_surveys" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("pro_surveys"), tolower(dfChordsTbls$ORG_NAME))], "pro_surveys"), envir = .GlobalEnv)
assign("pro_questions", value = ifelse("pro_questions" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("pro_questions"), tolower(dfChordsTbls$ORG_NAME))], "pro_questions"), envir = .GlobalEnv)
assign("pro_responses", value = ifelse("pro_responses" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("pro_responses"), tolower(dfChordsTbls$ORG_NAME))], "pro_responses"), envir = .GlobalEnv)
assign("death", value = ifelse("death" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("death"), tolower(dfChordsTbls$ORG_NAME))], "death"), envir = .GlobalEnv)
assign("pharmacy", value = ifelse("pharmacy" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("pharmacy"), tolower(dfChordsTbls$ORG_NAME))], "pharmacy"), envir = .GlobalEnv)
assign("prescribing", value = ifelse("prescribing" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("prescribing"), tolower(dfChordsTbls$ORG_NAME))], "prescribing"), envir = .GlobalEnv)
assign("link", value = ifelse("link" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("link"), tolower(dfChordsTbls$ORG_NAME))], "link"), envir = .GlobalEnv)
} else {
# Names of database tables
assign("demographics", value = "demographics", envir = .GlobalEnv)
assign("encounters", value = "encounters", envir = .GlobalEnv)
assign("census_location", value = "census_location", envir = .GlobalEnv)
assign("diagnoses", value = "diagnoses", envir = .GlobalEnv)
assign("vital_signs", value = "vital_signs", envir = .GlobalEnv)
assign("lab_results", value = "lab_results", envir = .GlobalEnv)
assign("procedures", value = "procedures", envir = .GlobalEnv)
assign("benefit", value = "benefit", envir = .GlobalEnv)
assign("linkage", value = "linkage", envir = .GlobalEnv)
assign("social_history", value = "social_history", envir = .GlobalEnv)
assign("provider_specialty", value = "provider_specialty", envir = .GlobalEnv)
assign("pro_surveys", value = "pro_surveys", envir = .GlobalEnv)
assign("pro_questions", value = "pro_questions", envir = .GlobalEnv)
assign("pro_responses", value = "pro_responses", envir = .GlobalEnv)
assign("death", value = "death", envir = .GlobalEnv)
assign("pharmacy", value = "pharmacy", envir = .GlobalEnv)
assign("prescribing", value = "prescribing", envir = .GlobalEnv)
assign("link", value = "link", envir = .GlobalEnv)
assign("session", value = "session", envir = .GlobalEnv)
assign("demographic", value = "demographic", envir = .GlobalEnv)
}
}
renderSqlText <- function(query_text){
query_text <- paste("SET NOCOUNT ON;", query_text, sep="\r\n")
SqlRender::render(sql = query_text,
warnOnMissingParameters = FALSE,
demographics = demographics,
encounters = encounters,
census_location = census_location,
diagnoses = diagnoses,
vital_signs = vital_signs,
lab_results = lab_results,
linkage = linkage,
social_history = social_history,
provider_specialty = provider_specialty,
pro_surveys = pro_surveys,
pro_questions = pro_questions,
pro_responses = pro_responses,
death = death,
pharmacy = pharmacy,
prescribing = prescribing,
link = link,
session = session)
}
conn <- getNewDBConnection()
runTableReplacements()
debugSource('~/CODI/Step_1/Partner_Step_1/CodeToRun.r')
renv::restore()
library("RODBC")
library("here")
library("SqlRender")
source(here("Setup.r"))
getConnectionString <- function(){
connectionString <- "Driver={Sql Server};"
if(nchar(PortNumber) > 0) {
connectionString <- paste(connectionString, "Server=", ServerName, ",", PortNumber, ";Database=", DatabaseName, ";", sep='')
}
else{
connectionString <- paste(connectionString, "Server=", ServerName, ";Database=", DatabaseName, ";", sep='')
}
if(nchar(SQLServerUserName) > 0){
connectionString <- paste(connectionString, "UID=", SQLServerUserName,";PWD=", SQLServerPassword, ";", sep='' )
}
if(nchar(extraSettings) > 0) {
connectionString <- paste(connectionString, ";", extraSettings, ";", sep='' )
}
return(connectionString)
}
getNewDBConnection <- function(){
connection_string <- getConnectionString()
db_conn <- RODBC::odbcDriverConnect(connection = connection_string, believeNRows = FALSE, rows_at_time = 1)
return(db_conn)
}
run_db_query <- function(db_conn = NULL, query_text = NULL, ...) {
if (is.null(db_conn)){
db_conn <- getNewDBConnection()
disconnect <- T
}
else{
disconnect <- F
}
if (is.null(query_text)) {
stop("No query argument was passed to function")
}
rendered_sql_query <- renderSqlText(query_text)
tryCatch(
{
result <- R.utils::withTimeout(sqlQuery(channel = db_conn, query = rendered_sql_query, ...), timeout = 4000)
return(result)
},
error = function(cond){
queryError <- cond
stop(cond)
}, finally = {
if (disconnect){
close_conection(db_conn)
}
}
)
}
runTableReplacements <- function(ConnectionString) {
dfChordsTbls <- run_db_query( query_text = "
IF EXISTS
(
SELECT
*
FROM  SYSOBJECTS
WHERE XTYPE = 'U' AND
NAME = 'CHORDS_TableNames'
)
BEGIN
SELECT
[ORG_NAME],
[NEW_NAME]
FROM[CHORDS_TABLENAMES];
END; ")
if (!is.null(dfChordsTbls) & !(length(dfChordsTbls)==0)) {
assign("demographics", value = ifelse("demographics" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("demographics"), tolower(dfChordsTbls$ORG_NAME))], "demographics"), envir = .GlobalEnv)
assign("encounters", value = ifelse("encounters" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("encounters"), tolower(dfChordsTbls$ORG_NAME))], "encounters"), envir = .GlobalEnv)
assign("census_location", value = ifelse("census_location" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("census_location"), tolower(dfChordsTbls$ORG_NAME))], "census_location"), envir = .GlobalEnv)
assign("diagnoses", value = ifelse("diagnoses" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("diagnoses"), tolower(dfChordsTbls$ORG_NAME))], "diagnoses"), envir = .GlobalEnv)
assign("vital_signs", value = ifelse("vital_signs" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("vital_signs"), tolower(dfChordsTbls$ORG_NAME))], "vital_signs"), envir = .GlobalEnv)
assign("lab_results", value = ifelse("lab_results" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("lab_results"), tolower(dfChordsTbls$ORG_NAME))], "lab_results"), envir = .GlobalEnv)
assign("procedures", value = ifelse("procedures" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("procedures"), tolower(dfChordsTbls$ORG_NAME))], "procedures"), envir = .GlobalEnv)
assign("benefit", value = ifelse("benefit" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("benefit"), tolower(dfChordsTbls$ORG_NAME))], "benefit"), envir = .GlobalEnv)
assign("linkage", value = ifelse("linkage" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("linkage"), tolower(dfChordsTbls$ORG_NAME))], "linkage"), envir = .GlobalEnv)
assign("social_history", value = ifelse("social_history" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("social_history"), tolower(dfChordsTbls$ORG_NAME))], "social_history"), envir = .GlobalEnv)
assign("provider_specialty", value = ifelse("provider_specialty" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("provider_specialty"), tolower(dfChordsTbls$ORG_NAME))], "provider_specialty"), envir = .GlobalEnv)
assign("pro_surveys", value = ifelse("pro_surveys" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("pro_surveys"), tolower(dfChordsTbls$ORG_NAME))], "pro_surveys"), envir = .GlobalEnv)
assign("pro_questions", value = ifelse("pro_questions" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("pro_questions"), tolower(dfChordsTbls$ORG_NAME))], "pro_questions"), envir = .GlobalEnv)
assign("pro_responses", value = ifelse("pro_responses" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("pro_responses"), tolower(dfChordsTbls$ORG_NAME))], "pro_responses"), envir = .GlobalEnv)
assign("death", value = ifelse("death" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("death"), tolower(dfChordsTbls$ORG_NAME))], "death"), envir = .GlobalEnv)
assign("pharmacy", value = ifelse("pharmacy" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("pharmacy"), tolower(dfChordsTbls$ORG_NAME))], "pharmacy"), envir = .GlobalEnv)
assign("prescribing", value = ifelse("prescribing" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("prescribing"), tolower(dfChordsTbls$ORG_NAME))], "prescribing"), envir = .GlobalEnv)
assign("link", value = ifelse("link" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("link"), tolower(dfChordsTbls$ORG_NAME))], "link"), envir = .GlobalEnv)
} else {
# Names of database tables
assign("demographics", value = "demographics", envir = .GlobalEnv)
assign("encounters", value = "encounters", envir = .GlobalEnv)
assign("census_location", value = "census_location", envir = .GlobalEnv)
assign("diagnoses", value = "diagnoses", envir = .GlobalEnv)
assign("vital_signs", value = "vital_signs", envir = .GlobalEnv)
assign("lab_results", value = "lab_results", envir = .GlobalEnv)
assign("procedures", value = "procedures", envir = .GlobalEnv)
assign("benefit", value = "benefit", envir = .GlobalEnv)
assign("linkage", value = "linkage", envir = .GlobalEnv)
assign("social_history", value = "social_history", envir = .GlobalEnv)
assign("provider_specialty", value = "provider_specialty", envir = .GlobalEnv)
assign("pro_surveys", value = "pro_surveys", envir = .GlobalEnv)
assign("pro_questions", value = "pro_questions", envir = .GlobalEnv)
assign("pro_responses", value = "pro_responses", envir = .GlobalEnv)
assign("death", value = "death", envir = .GlobalEnv)
assign("pharmacy", value = "pharmacy", envir = .GlobalEnv)
assign("prescribing", value = "prescribing", envir = .GlobalEnv)
assign("link", value = "link", envir = .GlobalEnv)
assign("session", value = "session", envir = .GlobalEnv)
assign("demographic", value = "demographic", envir = .GlobalEnv)
}
}
renderSqlText <- function(query_text){
query_text <- paste("SET NOCOUNT ON;", query_text, sep="\r\n")
SqlRender::render(sql = query_text,
warnOnMissingParameters = FALSE,
demographics = demographics,
encounters = encounters,
census_location = census_location,
diagnoses = diagnoses,
vital_signs = vital_signs,
lab_results = lab_results,
linkage = linkage,
social_history = social_history,
provider_specialty = provider_specialty,
pro_surveys = pro_surveys,
pro_questions = pro_questions,
pro_responses = pro_responses,
death = death,
pharmacy = pharmacy,
prescribing = prescribing,
link = link,
session = session)
}
conn <- getNewDBConnection()
runTableReplacements()
debugSource('~/CODI/Step_1/Partner_Step_1/CodeToRun.r')
renv::restore()
library("RODBC")
library("here")
library("SqlRender")
source(here("Setup.r"))
getConnectionString <- function(){
connectionString <- "Driver={Sql Server};"
if(nchar(PortNumber) > 0) {
connectionString <- paste(connectionString, "Server=", ServerName, ",", PortNumber, ";Database=", DatabaseName, ";", sep='')
}
else{
connectionString <- paste(connectionString, "Server=", ServerName, ";Database=", DatabaseName, ";", sep='')
}
if(nchar(SQLServerUserName) > 0){
connectionString <- paste(connectionString, "UID=", SQLServerUserName,";PWD=", SQLServerPassword, ";", sep='' )
}
if(nchar(extraSettings) > 0) {
connectionString <- paste(connectionString, ";", extraSettings, ";", sep='' )
}
return(connectionString)
}
getNewDBConnection <- function(){
connection_string <- getConnectionString()
db_conn <- RODBC::odbcDriverConnect(connection = connection_string, believeNRows = FALSE, rows_at_time = 1)
return(db_conn)
}
run_db_query <- function(db_conn = NULL, query_text = NULL, ...) {
if (is.null(db_conn)){
db_conn <- getNewDBConnection()
disconnect <- T
}
else{
disconnect <- F
}
if (is.null(query_text)) {
stop("No query argument was passed to function")
}
rendered_sql_query <- renderSqlText(query_text)
tryCatch(
{
result <- R.utils::withTimeout(sqlQuery(channel = db_conn, query = rendered_sql_query, ...), timeout = 4000)
return(result)
},
error = function(cond){
queryError <- cond
stop(cond)
}, finally = {
if (disconnect){
close_conection(db_conn)
}
}
)
}
runTableReplacements <- function(ConnectionString) {
dfChordsTbls <- run_db_query( query_text = "
IF EXISTS
(
SELECT
*
FROM  SYSOBJECTS
WHERE XTYPE = 'U' AND
NAME = 'CHORDS_TableNames'
)
BEGIN
SELECT
[ORG_NAME],
[NEW_NAME]
FROM[CHORDS_TABLENAMES];
END; ")
if (!is.null(dfChordsTbls) & !(length(dfChordsTbls)==0)) {
assign("demographics", value = ifelse("demographics" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("demographics"), tolower(dfChordsTbls$ORG_NAME))], "demographics"), envir = .GlobalEnv)
assign("encounters", value = ifelse("encounters" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("encounters"), tolower(dfChordsTbls$ORG_NAME))], "encounters"), envir = .GlobalEnv)
assign("census_location", value = ifelse("census_location" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("census_location"), tolower(dfChordsTbls$ORG_NAME))], "census_location"), envir = .GlobalEnv)
assign("diagnoses", value = ifelse("diagnoses" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("diagnoses"), tolower(dfChordsTbls$ORG_NAME))], "diagnoses"), envir = .GlobalEnv)
assign("vital_signs", value = ifelse("vital_signs" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("vital_signs"), tolower(dfChordsTbls$ORG_NAME))], "vital_signs"), envir = .GlobalEnv)
assign("lab_results", value = ifelse("lab_results" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("lab_results"), tolower(dfChordsTbls$ORG_NAME))], "lab_results"), envir = .GlobalEnv)
assign("procedures", value = ifelse("procedures" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("procedures"), tolower(dfChordsTbls$ORG_NAME))], "procedures"), envir = .GlobalEnv)
assign("benefit", value = ifelse("benefit" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("benefit"), tolower(dfChordsTbls$ORG_NAME))], "benefit"), envir = .GlobalEnv)
assign("linkage", value = ifelse("linkage" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("linkage"), tolower(dfChordsTbls$ORG_NAME))], "linkage"), envir = .GlobalEnv)
assign("social_history", value = ifelse("social_history" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("social_history"), tolower(dfChordsTbls$ORG_NAME))], "social_history"), envir = .GlobalEnv)
assign("provider_specialty", value = ifelse("provider_specialty" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("provider_specialty"), tolower(dfChordsTbls$ORG_NAME))], "provider_specialty"), envir = .GlobalEnv)
assign("pro_surveys", value = ifelse("pro_surveys" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("pro_surveys"), tolower(dfChordsTbls$ORG_NAME))], "pro_surveys"), envir = .GlobalEnv)
assign("pro_questions", value = ifelse("pro_questions" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("pro_questions"), tolower(dfChordsTbls$ORG_NAME))], "pro_questions"), envir = .GlobalEnv)
assign("pro_responses", value = ifelse("pro_responses" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("pro_responses"), tolower(dfChordsTbls$ORG_NAME))], "pro_responses"), envir = .GlobalEnv)
assign("death", value = ifelse("death" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("death"), tolower(dfChordsTbls$ORG_NAME))], "death"), envir = .GlobalEnv)
assign("pharmacy", value = ifelse("pharmacy" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("pharmacy"), tolower(dfChordsTbls$ORG_NAME))], "pharmacy"), envir = .GlobalEnv)
assign("prescribing", value = ifelse("prescribing" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("prescribing"), tolower(dfChordsTbls$ORG_NAME))], "prescribing"), envir = .GlobalEnv)
assign("link", value = ifelse("link" %in% tolower(dfChordsTbls$ORG_NAME),  dfChordsTbls$NEW_NAME[match(tolower("link"), tolower(dfChordsTbls$ORG_NAME))], "link"), envir = .GlobalEnv)
} else {
# Names of database tables
assign("demographics", value = "demographics", envir = .GlobalEnv)
assign("encounters", value = "encounters", envir = .GlobalEnv)
assign("census_location", value = "census_location", envir = .GlobalEnv)
assign("diagnoses", value = "diagnoses", envir = .GlobalEnv)
assign("vital_signs", value = "vital_signs", envir = .GlobalEnv)
assign("lab_results", value = "lab_results", envir = .GlobalEnv)
assign("procedures", value = "procedures", envir = .GlobalEnv)
assign("benefit", value = "benefit", envir = .GlobalEnv)
assign("linkage", value = "linkage", envir = .GlobalEnv)
assign("social_history", value = "social_history", envir = .GlobalEnv)
assign("provider_specialty", value = "provider_specialty", envir = .GlobalEnv)
assign("pro_surveys", value = "pro_surveys", envir = .GlobalEnv)
assign("pro_questions", value = "pro_questions", envir = .GlobalEnv)
assign("pro_responses", value = "pro_responses", envir = .GlobalEnv)
assign("death", value = "death", envir = .GlobalEnv)
assign("pharmacy", value = "pharmacy", envir = .GlobalEnv)
assign("prescribing", value = "prescribing", envir = .GlobalEnv)
assign("link", value = "link", envir = .GlobalEnv)
assign("session", value = "session", envir = .GlobalEnv)
assign("demographic", value = "demographic", envir = .GlobalEnv)
}
}
renderSqlText <- function(query_text){
query_text <- paste("SET NOCOUNT ON;", query_text, sep="\r\n")
SqlRender::render(sql = query_text,
warnOnMissingParameters = FALSE,
demographics = demographics,
encounters = encounters,
census_location = census_location,
diagnoses = diagnoses,
vital_signs = vital_signs,
lab_results = lab_results,
linkage = linkage,
social_history = social_history,
provider_specialty = provider_specialty,
pro_surveys = pro_surveys,
pro_questions = pro_questions,
pro_responses = pro_responses,
death = death,
pharmacy = pharmacy,
prescribing = prescribing,
link = link,
session = session)
}
conn <- getNewDBConnection()
runTableReplacements()
run_db_query(conn, readSql(here("sql", "enc_counts.sql")))
run_db_query(conn, readSql(here("sql", "cohort_demographic.sql")))
run_db_query(conn, readSql(here("sql", "cohort_demographic_age.sql")))
run_db_query(conn, readSql(here("sql", "cohort_demographic_age_filter.sql")))
run_db_query(conn, readSql(here("sql", "study_programs.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort.sql")))
run_db_query(conn, readSql(here("sql", "study_sample.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_inclusion.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_exclusion.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort.sql")))
run_db_query(conn, readSql(here("sql", "encounter_count.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_export.sql")))
run_db_query(conn, readSql(here("sql", "cohort.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_demographic.sql")))
sqlResult <- sqlQuery(conn, "SELECT * FROM #study_cohort_demographic")
dbDisconnect(conn)
write.csv(x = sqlResult,
file = paste(study_cohort_demographic_, PartnerID ,sep=''),
row.names = F,
quote = T,
sep = ",")
debugSource('~/CODI/Step_1/Partner_Step_1/CodeToRun.r')
demographics
exists(demographics)
exists("demograpics")
library(CODIRStep1)
debugSource('~/CODI/Step_1/Partner_Step_1/CodeToRun.r')
library(CODIRStep1)
debugSource('~/CODI/Step_1/Partner_Step_1/CodeToRun.r')
debugSource('~/CODI/Step_1/Partner_Step_1/CodeToRun.r')
debugSource('~/CODI/Step_1/Partner_Step_1/CodeToRun.r')
debugSource('~/CODI/Step_1/Partner_Step_1/CodeToRun.r')
