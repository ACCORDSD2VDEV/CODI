run_db_query(conn, readSql(here("sql", "cohort.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_demographic.sql")))
sqlResult <- run_db_query(conn, "SELECT * FROM #study_cohort_demographic")
},error = function(cond){
stop(cond)
}, finally = {
RODBC::odbcClose(conn)
})
write.csv(x = sqlResult,
file = paste("study_cohort_demographic_", PartnerID ,sep=''),
row.names = F,
quote = T,
sep = ",")
source('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
library(CODIRStep1)
renv::restore()
library("RODBC")
library("here")
library("SqlRender")
source(here("Setup.r"))
source(here("R", "functions.r"))
tryCatch({
conn <- getNewDBConnection()
run_db_query(conn, readSql(here("sql", "enc_counts.sql")))
run_db_query(conn, readSql(here("sql", "cohort_demographic.sql")))
run_db_query(conn, readSql(here("sql", "cohort_demographic_age.sql")))
run_db_query(conn, readSql(here("sql", "cohort_demographic_age_filter.sql")))
run_db_query(conn, readSql(here("sql", "study_programs_cwmp.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_inclusion.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_exclusion.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort.sql")))
run_db_query(conn, readSql(here("sql", "encounter_count.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_export.sql")))
run_db_query(conn, readSql(here("sql", "cohort.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_demographic.sql")))
sqlResult <- run_db_query(conn, "SELECT * FROM #study_cohort_demographic")
},error = function(cond){
stop(cond)
}, finally = {
RODBC::odbcClose(conn)
})
write.csv(x = sqlResult,
file = paste("study_cohort_demographic_", PartnerID ,sep=''),
row.names = F,
quote = T,
sep = ",")
source('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
library(CODIRStep1)
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/R/functions.R')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
use warnings()
warnings()
library(CODIRStep1)
warnings()
warnings()
library(CODIRStep1)
remove.packages("CODIRStep1", lib="~/GitHub/CODI/Partner_Step_1/renv/library/R-4.0/x86_64-w64-mingw32")
library(CODIRStep1)
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
if(result == -1L)
)
if(result == -1L){message(cond)}
renv::restore()
library("RODBC")
library("here")
library("SqlRender")
source(here("Setup.r"))
#source(here("R", "functions.r"))
getConnectionString <- function(){
connectionString <- "Driver={Sql Server};"
if(nchar(PortNumber) > 0) {
connectionString <- paste(connectionString, "Server=", ServerName, ",", PortNumber, ";Database=", DatabaseName, ";", sep='')
}
else{
connectionString <- paste(connectionString, "Server=", ServerName, ";Database=", DatabaseName, ";", sep='')
}
if(nchar(SQLServerUserName) > 0){
connectionString <- paste(connectionString, "UID=", SQLServerUserName,";PWD=", SQLServerPassword, ";", sep='' )
}
if(nchar(extraSettings) > 0) {
connectionString <- paste(connectionString, ";", extraSettings, ";", sep='' )
}
return(connectionString)
}
getNewDBConnection <- function(){
connection_string <- getConnectionString()
db_conn <- RODBC::odbcDriverConnect(connection = connection_string, believeNRows = FALSE, rows_at_time = 1)
return(db_conn)
}
run_db_query <- function(db_conn = NULL, query_text = NULL, renderSql = T, ...) {
disconnect <- NULL
if (is.null(query_text)) {
stop("No query argument was passed to function")
}
rendered_sql_query <- renderSqlText(query_text = query_text, render = renderSql )
x <- tryCatch(
{
if (is.null(db_conn)){
db_conn <- getNewDBConnection()
disconnect <- T
}
else{
disconnect <- F
}
result <- R.utils::withTimeout(RODBC::sqlQuery(channel = db_conn, query = rendered_sql_query, ...), timeout = 4000)
},
error = function(cond){
queryError <- cond
stop(cond)
return(NA)
},
finally = {
if(result = -1L){
stop(cond)
}
if (disconnect){
RODBC::odbcClose(db_conn)
}
}
)
}
renderSqlText <- function(query_text, render=T){
query_text <- paste("SET NOCOUNT ON;", query_text, sep="\r\n")
if (render){
query_text <- SqlRender::render(sql = query_text,
warnOnMissingParameters = FALSE,
ALERT = ALERT,
ASSET_DELIVERY = ASSET_DELIVERY,
CENSUS_DEMOG = CENSUS_DEMOG,
CENSUS_LOCATION = CENSUS_LOCATION,
COST = COST,
CURRICULUM_COMPONENT = CURRICULUM_COMPONENT,
DEMOGRAPHIC = DEMOGRAPHIC,
DIAGNOSIS = DIAGNOSIS,
ENCOUNTER = ENCOUNTER,
FAMILY_HISTORY = FAMILY_HISTORY,
IDENTIFIER = IDENTIFIER,
IDENTITY_HASH_BUNDLE = IDENTITY_HASH_BUNDLE,
LAB_RESULT_CM = LAB_RESULT_CM,
LINK = LINK,
PRESCRIBING = PRESCRIBING,
PROCEDURES = PROCEDURES,
PROGRAM = PROGRAM,
PROVIDER = PROVIDER,
REFERRAL = REFERRAL,
SESSION = SESSION,
SESSION_ALERT = SESSION_ALERT,
VITAL = VITAL)
}
return(query_text)
}
tryCatch(
{
conn <- getNewDBConnection()
result1 <- run_db_query(conn, readSql(here("sql", "enc_counts.sql")))
result2 <- run_db_query(conn, readSql(here("sql", "cohort_demographic.sql")))
result3 <- run_db_query(conn, readSql(here("sql", "cohort_demographic_age.sql")))
result4 <- run_db_query(conn, readSql(here("sql", "cohort_demographic_age_filter.sql")))
result5 <- run_db_query(conn, readSql(here("sql", "study_programs_cwmp.sql")))
result6 <- run_db_query(conn, readSql(here("sql", "study_cohort.sql")))
result7 <- run_db_query(conn, readSql(here("sql", "study_cohort_inclusion.sql")))
result8 <- run_db_query(conn, readSql(here("sql", "study_cohort_exclusion.sql")))
result9 <- run_db_query(conn, readSql(here("sql", "study_cohort.sql")))
result10 <- run_db_query(conn, readSql(here("sql", "encounter_count.sql")))
result11 <- run_db_query(conn, readSql(here("sql", "study_cohort_export.sql")))
result12 <- run_db_query(conn, readSql(here("sql", "cohort.sql")))
sqlResult <- run_db_query(conn, "SELECT * FROM #study_cohort_demographic")
},
error=function(cond){
stop(cond)
},
finally={
RODBC::odbcClose(conn)
})
write.csv(x = sqlResult,
file = paste("study_cohort_demographic_", PartnerID ,sep=''),
row.names = F,
quote = T,
sep = ",")
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
library(CODIRStep1)
remove.packages("CODIRStep1", lib="~/GitHub/CODI/Partner_Step_1/renv/library/R-4.0/x86_64-w64-mingw32")
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
warnings()
errors()
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
library(CODIRStep1)
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
library(CODIRStep1)
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
sqlResult
if (sqlResult == -1L) (message("bad"))
library(CODIRStep1)
source('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
library(CODIRStep1)
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
renv::restore()
library("DBI")
library("odbc")
library("here")
library("SqlRender")
source(here("Setup.r"))
#source(here("R", "functions.r"))
ALERT <- "ALERT"
ASSET_DELIVERY <- "ASSET_DELIVERY"
CENSUS_DEMOG <- "CENSUS_DEMOG"
CENSUS_LOCATION <- "CENSUS_LOCATION"
COST <- "COST"
CURRICULUM_COMPONENT <- "CURRICULUM_COMPONENT"
DEMOGRAPHIC <- "DEMOGRAPHIC"
DIAGNOSIS <- "DIAGNOSIS"
ENCOUNTER <- "ENCOUNTERS"
FAMILY_HISTORY <- "FAMILY_HISTORY"
IDENTIFIER <- "IDENTIFIER"
IDENTITY_HASH_BUNDLE <- "IDENTITY_HASH_BUNDLE"
LAB_RESULT_CM <- "LAB_RESULT_CM"
LINK <- "LINK"
PRESCRIBING <- "PRESCRIBING"
PROCEDURES <- "PROCEDURES"
PROGRAM <- "PROGRAM"
PROVIDER <- "PROVIDER"
REFERRAL <- "REFERRAL"
SESSION <- "SESSION"
SESSION_ALERT <- "SESSION_ALERT"
VITAL <- "VITAL"
getConnectionString <- function(){
connectionString <- "Driver={Sql Server};"
if(ServerName == "" || DatabaseName == ""){
stop("Server name or database name is empty.  Check the Setup.r file")
}
if(nchar(PortNumber) > 0) {
connectionString <- paste(connectionString, "Server=", ServerName, ",", PortNumber, ";Database=", DatabaseName, ";", sep='')
}
else{
connectionString <- paste(connectionString, "Server=", ServerName, ";Database=", DatabaseName, ";", sep='')
}
if(nchar(SQLServerUserName) > 0){
connectionString <- paste(connectionString, "UID=", SQLServerUserName,";PWD=", SQLServerPassword, ";", sep='' )
}
if(nchar(extraSettings) > 0) {
connectionString <- paste(connectionString, ";", extraSettings, ";", sep='' )
}
return(connectionString)
}
getNewDBConnection <- function(){
connection_string <- getConnectionString()
db_conn <- DBI::dbConnect(odbc::odbc(), "SQL Server", .connection_string = connection_string )
#db_conn <- RODBC::odbcDriverConnect(connection = connection_string, believeNRows = FALSE, rows_at_time = 1)
return(db_conn)
}
run_db_query <- function(db_conn = NULL, query_text = NULL, renderSql = T, ...) {
if (is.null(query_text)) {
stop("No query argument was passed to function")
}
rendered_sql_query <- renderSqlText(query_text = query_text, render = renderSql )
if(is.null(db_conn)){
db_conn <- get_new_connection(Connection_String)
disconnect <- T
}
result <- R.utils::withTimeout(
tryCatch(
{
#sqlResult <- sqlQuery(channel = db_conn, query = query_text, ...)
sqlResult <- dbExecute(conn = db_conn, statement = rendered_sql_query, immediate = TRUE)
return (sqlResult)
},error = function(cond){
stop(cond)
}),
onTimeout = 'error', timeout = 2100)
return(result)
}
renderSqlText <- function(query_text, render=T){
query_text <- paste("SET NOCOUNT ON;", query_text, sep="\r\n")
if (render){
query_text <- SqlRender::render(sql = query_text,
warnOnMissingParameters = FALSE,
ALERT = ALERT,
ASSET_DELIVERY = ASSET_DELIVERY,
CENSUS_DEMOG = CENSUS_DEMOG,
CENSUS_LOCATION = CENSUS_LOCATION,
COST = COST,
CURRICULUM_COMPONENT = CURRICULUM_COMPONENT,
DEMOGRAPHIC = DEMOGRAPHIC,
DIAGNOSIS = DIAGNOSIS,
ENCOUNTER = ENCOUNTER,
FAMILY_HISTORY = FAMILY_HISTORY,
IDENTIFIER = IDENTIFIER,
IDENTITY_HASH_BUNDLE = IDENTITY_HASH_BUNDLE,
LAB_RESULT_CM = LAB_RESULT_CM,
LINK = LINK,
PRESCRIBING = PRESCRIBING,
PROCEDURES = PROCEDURES,
PROGRAM = PROGRAM,
PROVIDER = PROVIDER,
REFERRAL = REFERRAL,
SESSION = SESSION,
SESSION_ALERT = SESSION_ALERT,
VITAL = VITAL)
}
return(query_text)
}
conn <- getNewDBConnection()
result1 <- run_db_query(conn, readSql(here("sql", "enc_counts.sql")))
result2 <- run_db_query(conn, readSql(here("sql", "cohort_demographic.sql")))
result3 <- run_db_query(conn, readSql(here("sql", "cohort_demographic_age.sql")))
result4 <- run_db_query(conn, readSql(here("sql", "cohort_demographic_age_filter.sql")))
result5 <- run_db_query(conn, readSql(here("sql", "study_programs_cwmp.sql")))
result6 <- run_db_query(conn, readSql(here("sql", "study_cohort.sql")))
result7 <- run_db_query(conn, readSql(here("sql", "study_cohort_inclusion.sql")))
result8 <- run_db_query(conn, readSql(here("sql", "study_cohort_exclusion.sql")))
result9 <- run_db_query(conn, readSql(here("sql", "study_cohort.sql")))
result10 <- run_db_query(conn, readSql(here("sql", "encounter_count.sql")))
result11 <- run_db_query(conn, readSql(here("sql", "study_cohort_export.sql")))
result12 <- run_db_query(conn, readSql(here("sql", "cohort.sql")))
sqlResult <- run_db_query(conn, "SELECT * FROM #study_cohort_demographic")
tryCatch({RODBC::odbcClose(conn)})
write.csv(x = sqlResult,
file = paste("study_cohort_demographic_", PartnerID ,sep=''),
row.names = F,
quote = T,
sep = ",")
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
result2
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
source('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/R/functions.R')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
renv::restore()
library("RODBC")
library("here")
library("SqlRender")
source(here("Setup.r"))
source(here("R", "functions.r"))
conn <- getNewDBConnection()
tryCatch({
result1 <- run_db_query(conn, "SELECT * INTO #TEMPTEST FROM (SELECT 1 as testcolumn) a;" )
result2 <- run_db_query(conn, "SELECT * FROM #TEMPTEST;" )
result3 <- run_db_query(conn, readSql(here("sql", "enc_counts.sql")))
run_db_query(conn, readSql(here("sql", "cohort_demographic.sql")))
run_db_query(conn, readSql(here("sql", "cohort_demographic_age.sql")))
run_db_query(conn, readSql(here("sql", "cohort_demographic_age_filter.sql")))
run_db_query(conn, readSql(here("sql", "study_programs_cwmp.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_inclusion.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_exclusion.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort.sql")))
run_db_query(conn, readSql(here("sql", "encounter_count.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_export.sql")))
run_db_query(conn, readSql(here("sql", "cohort.sql")))
sqlResult <- run_db_query(conn, "SELECT * FROM #study_cohort_demographic")
}, error = function(cond){
stop(cond)
}, finally = {
tryCatch({RODBC::odbcClose(conn)})
})
write.csv(x = sqlResult,
file = paste("study_cohort_demographic_", PartnerID ,sep=''),
row.names = F,
quote = T,
sep = ",")
debugSource('~/GitHub/CODI/Partner_Step_1/R/functions.R')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
renv::restore()
library("RODBC")
library("here")
library("SqlRender")
source(here("Setup.r"))
#source(here("R", "functions.r"))
getConnectionString <- function(){
connectionString <- "Driver={Sql Server};"
if(ServerName == "" || DatabaseName == ""){
stop("Server name or database name is empty.  Check the Setup.r file")
}
if(nchar(PortNumber) > 0) {
connectionString <- paste(connectionString, "Server=", ServerName, ",", PortNumber, ";Database=", DatabaseName, ";", sep='')
}
else{
connectionString <- paste(connectionString, "Server=", ServerName, ";Database=", DatabaseName, ";", sep='')
}
if(nchar(SQLServerUserName) > 0){
connectionString <- paste(connectionString, "UID=", SQLServerUserName,";PWD=", SQLServerPassword, ";", sep='' )
}
if(nchar(extraSettings) > 0) {
connectionString <- paste(connectionString, ";", extraSettings, ";", sep='' )
}
return(connectionString)
}
getNewDBConnection <- function(){
connection_string <- getConnectionString()
#db_conn <- DBI::dbConnect(odbc::odbc(), "SQL Server", .connection_string = connection_string )
db_conn <- RODBC::odbcDriverConnect(connection = connection_string, believeNRows = FALSE, rows_at_time = 1)
return(db_conn)
}
run_db_query <- function(db_conn = NULL, query_text = NULL, renderSql = T, ...) {
if (is.null(query_text)) {
stop("No query argument was passed to function")
}
rendered_sql_query <- renderSqlText(query_text = query_text, render = renderSql )
result <- R.utils::withTimeout(
tryCatch({
RODBC::sqlQuery(channel = db_conn, query = rendered_sql_query, errors = T)
}, error = function(cond) {
stop(error)
})
#dbExecute(conn = db_conn,
#          statement = rendered_sql_query,
#          immediate = TRUE)
, onTimeout = 'error', timeout = 2100)
return(result)
}
renderSqlText <- function(query_text, render=T){
query_text <- paste("SET NOCOUNT ON;", query_text, sep="\r\n")
if (render){
query_text <- SqlRender::render(sql = query_text,
warnOnMissingParameters = FALSE,
ALERT = ALERT,
ASSET_DELIVERY = ASSET_DELIVERY,
CENSUS_DEMOG = CENSUS_DEMOG,
CENSUS_LOCATION = CENSUS_LOCATION,
COST = COST,
CURRICULUM_COMPONENT = CURRICULUM_COMPONENT,
DEMOGRAPHIC = DEMOGRAPHIC,
DIAGNOSIS = DIAGNOSIS,
ENCOUNTER = ENCOUNTER,
FAMILY_HISTORY = FAMILY_HISTORY,
IDENTIFIER = IDENTIFIER,
IDENTITY_HASH_BUNDLE = IDENTITY_HASH_BUNDLE,
LAB_RESULT_CM = LAB_RESULT_CM,
LINK = LINK,
PRESCRIBING = PRESCRIBING,
PROCEDURES = PROCEDURES,
PROGRAM = PROGRAM,
PROVIDER = PROVIDER,
REFERRAL = REFERRAL,
SESSION = SESSION,
SESSION_ALERT = SESSION_ALERT,
VITAL = VITAL)
}
return(query_text)
}
conn <- getNewDBConnection()
tryCatch({
result1 <- run_db_query(conn, "SELECT * INTO #TEMPTEST FROM (SELECT 1 as testcolumn) a;" )
result2 <- run_db_query(conn, "SELECT * FROM #TEMPTEST;" )
result3 <- run_db_query(conn, readSql(here("sql", "enc_counts.sql")))
run_db_query(conn, readSql(here("sql", "cohort_demographic.sql")))
run_db_query(conn, readSql(here("sql", "cohort_demographic_age.sql")))
run_db_query(conn, readSql(here("sql", "cohort_demographic_age_filter.sql")))
run_db_query(conn, readSql(here("sql", "study_programs_cwmp.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_inclusion.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_exclusion.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort.sql")))
run_db_query(conn, readSql(here("sql", "encounter_count.sql")))
run_db_query(conn, readSql(here("sql", "study_cohort_export.sql")))
run_db_query(conn, readSql(here("sql", "cohort.sql")))
sqlResult <- run_db_query(conn, "SELECT * FROM #study_cohort_demographic")
}, error = function(cond){
stop(cond)
}, finally = {
tryCatch({RODBC::odbcClose(conn)})
})
write.csv(x = sqlResult,
file = paste("study_cohort_demographic_", PartnerID ,sep=''),
row.names = F,
quote = T,
sep = ",")
source('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
library(CODIRStep1)
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
debugSource('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
source('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
source('~/GitHub/CODI/Partner_Step_1/CodeToRun.r')
